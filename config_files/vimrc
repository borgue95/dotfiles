" VUNDLE CONFIG
" -----------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Pluguin for autocompletion (semantic as well)
"Plugin 'https://github.com/Valloric/YouCompleteMe.git'
" Plugin for autocompletion for Java
"Plugin 'artur-shaik/vim-javacomplete2'
Plugin 'morhetz/gruvbox'
Plugin 'junegunn/seoul256.vim'
"Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'junegunn/goyo.vim'

call vundle#end()            " required
" -----------------------------------------------------------------------------

" PATHOGEN CONFIG
" -----------------------------------------------------------------------------
"execute pathogen#infect()
" -----------------------------------------------------------------------------

filetype on
filetype plugin on
filetype plugin indent on

" PLUGIN CONFIGS
" -----------------------------------------------------------------------------
" SYNTAX HIGHLIGHTING

" enable lilypond syntax
filetype off
set runtimepath+=/usr/share/lilypond/2.18.2/vim
filetype on

" enable syntax highlighting
syntax on
syntax enable
 
" GRUVBOX config
let g:gruvbox_contrast_dark="soft"
set background=dark " Setting dark mode
colorscheme gruvbox

" SEOUL 256 config
"let g:seoul256_srgb = 1
"let g:seoul256_background = 236
"colo seoul256

" VIM latex live preview
let g:livepreview_previewer = 'atril'
set updatetime=1000

" Goyo config
let g:goyo_width=100

" YCM config
"let g:ycm_autoclose_preview_window_after_completion=2
"let g:ycm_collect_identifiers_from_tags_files=1
"let g:ycm_seed_identifiers_with_syntax=0
" Apply YCM FixIt
"map <F9> :YcmCompleter FixIt<CR>

" JAVACOMPLETE2 config
"autocmd FileType java setlocal omnifunc=javacomplete#Complete

" F-MAPPINGS
" -----------------------------------------------------------------------------
map <F1> :LLPStartPreview<CR>
map <F2> :NERDTreeToggle<CR>
nnoremap <F3> :set hlsearch!<CR>       " Toggle visibility of search results

" LaTeX basic compilation
autocmd FileType tex,markdown map <F5> :!make<CR><CR>
map <F6> :setlocal spell! spelllang=ca<CR>
map <F7> gwip                          " wrap text inside the paragraph
map <F8> vipJ                          " unwrap text inside the paragraph
map <F9> :Goyo<CR>                     " Toggle Goyo

" VIM CONFIG
" -----------------------------------------------------------------------------

vnoremap <C-c> "+y
map <C-v> "+p

au BufNewFile,BufRead *.cl set filetype=c
au BufNewFile,BufRead *.lytex set filetype=tex

set number relativenumber
set t_Co=256

let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
autocmd FileType tex,markdown set textwidth=79  " autowrap at 80 characters

" Split navigation config
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" Set line breaker indicator
set colorcolumn=80,120

set tabstop=4     " tab character width
set shiftwidth=4  " what happens when ==, << or >>
set softtabstop=4 " how many spaces when tabbing
set smarttab      " begin counting from the begining of the line
set expandtab     " Use spaces instead of tab character

set autoindent    " copy last line indentation
set smartindent   " indentation based on syntax
set wrap          " wrap lines
set linebreak     " wrap lines without breaking words

" Ignore case when searching
set ignorecase
" Highlight all search pattern matches
set hlsearch

" Use mouse to move inside vim
"set mouse=a
set visualbell " disables terminal bell on vim

set scrolloff=5

" FINDING FILES
" Search down into subfolders
set path+=**

" Display all matching files when I tab complete
set wildmenu

" TEX MACROS
" -----------------------------------------------------------------------------

autocmd FileType tex set textwidth=79  " autowrap at 80 characters

" Navigation
" yanks the <++> pattern to the _ register
autocmd FileType tex inoremap <Tab><Tab> <Esc>/<++><CR>"_ca<
autocmd FileType tex vnoremap <Tab><Tab> <Esc>/<++><CR>
autocmd FileType tex nnoremap <Tab><Tab> <Esc>/<++><CR>"_ca<
autocmd FileType tex inoremap ;gui <++>

" Shortcuts
autocmd FileType tex inoremap ;bf \textbf{}<++><Esc>T{i
autocmd FileType tex inoremap ;tt \texttt{}<++><Esc>T{i
autocmd FileType tex inoremap ;it \textit{}<++><Esc>T{i
autocmd FileType tex inoremap ;sc \textsc{}<++><Esc>T{i
autocmd FileType tex inoremap ;sl \textsl{}<++><Esc>T{i
autocmd FileType tex inoremap ;qu \enquote{}<++><Esc>T{i
autocmd FileType tex inoremap ;sec \section{}<CR><CR><++><Esc>2k0f{a
autocmd FileType tex inoremap ;ssec \subsection{}<CR><CR><++><Esc>2k0f{a
autocmd FileType tex inoremap ;sssec \subsubsection{}<CR><CR><++><Esc>2k0f{a

autocmd FileType tex inoremap ;en \begin{enumerate}<CR><CR>\item<Space><CR><CR>\end{enumerate}<CR><CR><++><Esc>4kA
autocmd FileType tex inoremap ;po \begin{itemize}<CR><CR>\item<Space><CR><CR>\end{itemize}<CR><CR><++><Esc>4kA
autocmd FileType tex inoremap ;im \begin{figure}<CR>\cCRing<CR>\includegraphics[]{<++>}<CR>\caption{<++>\label{<++>}}<CR>\end{figure}<CR><CR><++><Esc>4k0<Esc>f[a
autocmd FileType tex inoremap ;beg \begin{DELRN}<CR><++><CR>\end{DELRN}<CR><CR><++><Esc>4k0fR:MultipleCursorsFind<Space>DELRN<CR>c

" Search in multiple lines
" Search for the ... arguments separated with whitespace (if no '!'),
" or with non-word characters (if '!' added to command).
function! SearchMultiLine(bang, ...)
  if a:0 > 0
    let sep = (a:bang) ? '\_W\+' : '\_s\+'
    let @/ = join(a:000, sep)
  endif
endfunction
command! -bang -nargs=* -complete=tag S call SearchMultiLine(<bang>0, <f-args>)|normal! /<C-R>/<CR>

" C/C++ MACROS

